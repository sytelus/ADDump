using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace CommonUtils
{
    public static class UnicodeAsciiCharacterMap
    {
        /// <summary>
        /// UnicodeAsciiCharMapping is mapping to normalize unicode characters
        /// key is the high byte of unicode
        /// value is a string array indexed by low byte of unicode
        /// Reference: https://bitbucket.org/Dimps/unidecodesharpfork/src/74baabb99c8184161bff5577926e5385a2f1bc2c/UnidecodeSharpFork/Characters.cs?at=master
        /// </summary>
        private static Dictionary<int, string[]> UnicodeAsciiCharMapping = new Dictionary<int, string[]>();
        static UnicodeAsciiCharacterMap()
        {
            UnicodeAsciiCharMapping.Add(0 /*0 00*/, new string[] {
				"\u0000" /*0000*/, "\u0001" /*0001*/, "\u0002" /*0002*/, "\u0003" /*0003*/, "\u0004" /*0004*/, "\u0005" /*0005*/, "\u0006" /*0006*/, "\u0007" /*0007*/, "\u0008" /*0008*/, "\u0009" /*0009*/, "\u000a" /*000a*/, "\u000b" /*000b*/, "\u000c" /*000c*/, "\u000d" /*000d*/, "\u000e" /*000e*/, "\u000f" /*000f*/, 
                "\u0010" /*0010*/, "\u0011" /*0011*/, "\u0012" /*0012*/, "\u0013" /*0013*/, "\u0014" /*0014*/, "\u0015" /*0015*/, "\u0016" /*0016*/, "\u0017" /*0017*/, "\u0018" /*0018*/, "\u0019" /*0019*/, "\u001a" /*001a*/, "\u001b" /*001b*/, "\u001c" /*001c*/, "\u001d" /*001d*/, "\u001e" /*001e*/, "\u001f" /*001f*/, 
                " " /*0020*/, "!" /*0021*/, "\"" /*0022*/, "#" /*0023*/, "$" /*0024*/, "%" /*0025*/, "&" /*0026*/, "'" /*0027*/, "(" /*0028*/, ")" /*0029*/, "*" /*002a*/, "+" /*002b*/, "," /*002c*/, "-" /*002d*/, "." /*002e*/, "/" /*002f*/, 
                "0" /*0030*/, "1" /*0031*/, "2" /*0032*/, "3" /*0033*/, "4" /*0034*/, "5" /*0035*/, "6" /*0036*/, "7" /*0037*/, "8" /*0038*/, "9" /*0039*/, ":" /*003a*/, ";" /*003b*/, "<" /*003c*/, "=" /*003d*/, ">" /*003e*/, "?" /*003f*/, 
                "@" /*0040*/, "A" /*0041*/, "B" /*0042*/, "C" /*0043*/, "D" /*0044*/, "E" /*0045*/, "F" /*0046*/, "G" /*0047*/, "H" /*0048*/, "I" /*0049*/, "J" /*004a*/, "K" /*004b*/, "L" /*004c*/, "M" /*004d*/, "N" /*004e*/, "O" /*004f*/, 
                "P" /*0050*/, "Q" /*0051*/, "R" /*0052*/, "S" /*0053*/, "T" /*0054*/, "U" /*0055*/, "V" /*0056*/, "W" /*0057*/, "X" /*0058*/, "Y" /*0059*/, "Z" /*005a*/, "]" /*005b*/, "\\" /*005c*/, "]" /*005d*/, "^" /*005e*/, "_" /*005f*/, 
                "`" /*0060*/, "a" /*0061*/, "b" /*0062*/, "c" /*0063*/, "d" /*0064*/, "e" /*0065*/, "f" /*0066*/, "g" /*0067*/, "h" /*0068*/, "i" /*0069*/, "j" /*006a*/, "k" /*006b*/, "l" /*006c*/, "m" /*006d*/, "n" /*006e*/, "o" /*006f*/, 
                "p" /*0070*/, "q" /*0071*/, "r" /*0072*/, "s" /*0073*/, "t" /*0074*/, "u" /*0075*/, "v" /*0076*/, "w" /*0077*/, "x" /*0078*/, "y" /*0079*/, "z" /*007a*/, "{" /*007b*/, "|" /*007c*/, "}" /*007d*/, "~" /*007e*/, "" /*007f*/, 
                "" /*0080*/, "" /*0081*/, "" /*0082*/, "" /*0083*/, "" /*0084*/, "" /*0085*/, "" /*0086*/, "" /*0087*/, "" /*0088*/, "" /*0089*/, "" /*008a*/, "" /*008b*/, "" /*008c*/, "" /*008d*/, "" /*008e*/, "" /*008f*/, 
                "" /*0090*/, "" /*0091*/, "" /*0092*/, "" /*0093*/, "" /*0094*/, "" /*0095*/, "" /*0096*/, "" /*0097*/, "" /*0098*/, "" /*0099*/, "" /*009a*/, "" /*009b*/, "" /*009c*/, "" /*009d*/, "" /*009e*/, "" /*009f*/, 
                " " /*00a0*/, "\u00a1" /*00a1*/, "\u00a2" /*00a2*/, "\u00a3" /*00a3*/, "\u00a4" /*00a4*/, "\u00a5" /*00a5*/, "|" /*00a6*/, "\u00a7" /*00a7*/, "\"" /*00a8*/, "(c)" /*00a9*/, "a" /*00aa*/, "<<" /*00ab*/, "!" /*00ac*/, "\u00ad" /*00ad*/, "(R)" /*00ae*/, "-" /*00af*/, 
                "deg" /*00b0*/, "+-" /*00b1*/, "2" /*00b2*/, "3" /*00b3*/, "'" /*00b4*/, "\u00b5" /*00b5*/, "\u00b6" /*00b6*/, "\00b7" /*00b7*/, "," /*00b8*/, "1" /*00b9*/, "o" /*00ba*/, ">>" /*00bb*/, "1/4" /*00bc*/, "1/2" /*00bd*/, "3/4" /*00be*/, "?" /*00bf*/, 
                "A" /*00c0*/, "A" /*00c1*/, "A" /*00c2*/, "A" /*00c3*/, "A" /*00c4*/, "A" /*00c5*/, "AE" /*00c6*/, "C" /*00c7*/, "E" /*00c8*/, "E" /*00c9*/, "E" /*00ca*/, "E" /*00cb*/, "I" /*00cc*/, "I" /*00cd*/, "I" /*00ce*/, "I" /*00cf*/, 
                "D" /*00d0*/, "N" /*00d1*/, "O" /*00d2*/, "O" /*00d3*/, "O" /*00d4*/, "O" /*00d5*/, "O" /*00d6*/, "x" /*00d7*/, "O" /*00d8*/, "U" /*00d9*/, "U" /*00da*/, "U" /*00db*/, "U" /*00dc*/, "Y" /*00dd*/, "TH" /*00de*/, "\u00df" /*00df*/, 
                "a" /*00e0*/, "a" /*00e1*/, "a" /*00e2*/, "a" /*00e3*/, "a" /*00e4*/, "a" /*00e5*/, "ae" /*00e6*/, "c" /*00e7*/, "e" /*00e8*/, "e" /*00e9*/, "e" /*00ea*/, "e" /*00eb*/, "i" /*00ec*/, "i" /*00ed*/, "i" /*00ee*/, "i" /*00ef*/, 
                "\u00f0" /*00f0*/, "n" /*00f1*/, "o" /*00f2*/, "o" /*00f3*/, "o" /*00f4*/, "o" /*00f5*/, "o" /*00f6*/, "/" /*00f7*/, "o" /*00f8*/, "u" /*00f9*/, "u" /*00fa*/, "u" /*00fb*/, "u" /*00fc*/, "y" /*00fd*/, "th" /*00fe*/, "y" /*00ff*/ 
			});
            UnicodeAsciiCharMapping.Add(1 /*256 01*/, new string[] {
				"A" /*0100*/, "a" /*0101*/, "A" /*0102*/, "a" /*0103*/, "A" /*0104*/, "a" /*0105*/, "C" /*0106*/, "c" /*0107*/, "C" /*0108*/, "c" /*0109*/, "C" /*010a*/, "c" /*010b*/, "C" /*010c*/, "c" /*010d*/, "D" /*010e*/, "d" /*010f*/, 
                "D" /*0110*/, "d" /*0111*/, "E" /*0112*/, "e" /*0113*/, "E" /*0114*/, "e" /*0115*/, "E" /*0116*/, "e" /*0117*/, "E" /*0118*/, "e" /*0119*/, "E" /*011a*/, "e" /*011b*/, "G" /*011c*/, "g" /*011d*/, "G" /*011e*/, "g" /*011f*/, 
                "G" /*0120*/, "g" /*0121*/, "G" /*0122*/, "g" /*0123*/, "H" /*0124*/, "h" /*0125*/, "H" /*0126*/, "h" /*0127*/, "I" /*0128*/, "i" /*0129*/, "I" /*012a*/, "i" /*012b*/, "I" /*012c*/, "i" /*012d*/, "I" /*012e*/, "i" /*012f*/, 
                "I" /*0130*/, "i" /*0131*/, "IJ" /*0132*/, "ij" /*0133*/, "J" /*0134*/, "j" /*0135*/, "K" /*0136*/, "k" /*0137*/, "k" /*0138*/, "L" /*0139*/, "l" /*013a*/, "L" /*013b*/, "l" /*013c*/, "L" /*013d*/, "l" /*013e*/, "L" /*013f*/, 
                "l" /*0140*/, "L" /*0141*/, "l" /*0142*/, "N" /*0143*/, "n" /*0144*/, "N" /*0145*/, "n" /*0146*/, "N" /*0147*/, "n" /*0148*/, "'n" /*0149*/, "ng" /*014a*/, "NG" /*014b*/, "O" /*014c*/, "o" /*014d*/, "O" /*014e*/, "o" /*014f*/, 
                "O" /*0150*/, "o" /*0151*/, "OE" /*0152*/, "oe" /*0153*/, "R" /*0154*/, "r" /*0155*/, "R" /*0156*/, "r" /*0157*/, "R" /*0158*/, "r" /*0159*/, "S" /*015a*/, "s" /*015b*/, "S" /*015c*/, "s" /*015d*/, "S" /*015e*/, "s" /*015f*/, 
                "S" /*0160*/, "s" /*0161*/, "T" /*0162*/, "t" /*0163*/, "T" /*0164*/, "t" /*0165*/, "T" /*0166*/, "t" /*0167*/, "U" /*0168*/, "u" /*0169*/, "U" /*016a*/, "u" /*016b*/, "U" /*016c*/, "u" /*016d*/, "U" /*016e*/, "u" /*016f*/, 
                "U" /*0170*/, "u" /*0171*/, "U" /*0172*/, "u" /*0173*/, "W" /*0174*/, "w" /*0175*/, "Y" /*0176*/, "y" /*0177*/, "Y" /*0178*/, "Z" /*0179*/, "z" /*017a*/, "Z" /*017b*/, "z" /*017c*/, "Z" /*017d*/, "z" /*017e*/, "s" /*017f*/, 
                "b" /*0180*/, "B" /*0181*/, "B" /*0182*/, "b" /*0183*/, "6" /*0184*/, "6" /*0185*/, "O" /*0186*/, "C" /*0187*/, "c" /*0188*/, "D" /*0189*/, "D" /*018a*/, "D" /*018b*/, "d" /*018c*/, "d" /*018d*/, "3" /*018e*/, "@" /*018f*/, 
                "E" /*0190*/, "F" /*0191*/, "f" /*0192*/, "G" /*0193*/, "G" /*0194*/, "hv" /*0195*/, "I" /*0196*/, "I" /*0197*/, "K" /*0198*/, "k" /*0199*/, "l" /*019a*/, "l" /*019b*/, "W" /*019c*/, "N" /*019d*/, "n" /*019e*/, "O" /*019f*/, 
                "O" /*01a0*/, "o" /*01a1*/, "OI" /*01a2*/, "oi" /*01a3*/, "P" /*01a4*/, "p" /*01a5*/, "YR" /*01a6*/, "2" /*01a7*/, "2" /*01a8*/, "SH" /*01a9*/, "sh" /*01aa*/, "t" /*01ab*/, "T" /*01ac*/, "t" /*01ad*/, "T" /*01ae*/, "U" /*01af*/, 
                "u" /*01b0*/, "Y" /*01b1*/, "V" /*01b2*/, "Y" /*01b3*/, "y" /*01b4*/, "Z" /*01b5*/, "z" /*01b6*/, "ZH" /*01b7*/, "ZH" /*01b8*/, "zh" /*01b9*/, "zh" /*01ba*/, "2" /*01bb*/, "5" /*01bc*/, "5" /*01bd*/, "ts" /*01be*/, "w" /*01bf*/, 
                "|" /*01c0*/, "||" /*01c1*/, "|=" /*01c2*/, "!" /*01c3*/, "DZ" /*01c4*/, "Dz" /*01c5*/, "dz" /*01c6*/, "LJ" /*01c7*/, "Lj" /*01c8*/, "lj" /*01c9*/, "NJ" /*01ca*/, "Nj" /*01cb*/, "nj" /*01cc*/, "A" /*01cd*/, "a" /*01ce*/, "I" /*01cf*/, 
                "i" /*01d0*/, "O" /*01d1*/, "o" /*01d2*/, "U" /*01d3*/, "u" /*01d4*/, "U" /*01d5*/, "u" /*01d6*/, "U" /*01d7*/, "u" /*01d8*/, "U" /*01d9*/, "u" /*01da*/, "U" /*01db*/, "u" /*01dc*/, "@" /*01dd*/, "A" /*01de*/, "a" /*01df*/, 
                "A" /*01e0*/, "a" /*01e1*/, "AE" /*01e2*/, "ae" /*01e3*/, "G" /*01e4*/, "g" /*01e5*/, "G" /*01e6*/, "g" /*01e7*/, "K" /*01e8*/, "k" /*01e9*/, "O" /*01ea*/, "o" /*01eb*/, "O" /*01ec*/, "o" /*01ed*/, "ZH" /*01ee*/, "zh" /*01ef*/, 
                "j" /*01f0*/, "DZ" /*01f1*/, "D" /*01f2*/, "dz" /*01f3*/, "G" /*01f4*/, "g" /*01f5*/, "HV" /*01f6*/, "W" /*01f7*/, "N" /*01f8*/, "n" /*01f9*/, "A" /*01fa*/, "a" /*01fb*/, "AE" /*01fc*/, "ae" /*01fd*/, "O" /*01fe*/, "o" /*01ff*/ 
			});
            UnicodeAsciiCharMapping.Add(33 /*8448 21*/, new string[] {
				"\u2100" /*2100*/, "\u2101" /*2101*/, "\u2102" /*2102*/, "\u2103" /*2103*/, "\u2104" /*2104*/, "\u2105" /*2105*/, "\u2106" /*2106*/, "\u2107" /*2107*/, "\u2108" /*2108*/, "\u2109" /*2109*/, "\u210a" /*210a*/, "\u210b" /*210b*/, "\u210c" /*210c*/, "\u210d" /*210d*/, "\u210e" /*210e*/, "\u210f" /*210f*/, 
                "\u2110" /*2110*/, "\u2111" /*2111*/, "\u2112" /*2112*/, "\u2113" /*2113*/, "\u2114" /*2114*/, "\u2115" /*2115*/, "\u2116" /*2116*/, "\u2117" /*2117*/, "\u2118" /*2118*/, "\u2119" /*2119*/, "\u211a" /*211a*/, "\u211b" /*211b*/, "\u211c" /*211c*/, "\u211d" /*211d*/, "\u211e" /*211e*/, "\u211f" /*211f*/, 
                "\u2120" /*2120*/, "\u2121" /*2121*/, "TM" /*2122*/, "\u2123" /*2123*/, "\u2124" /*2124*/, "\u2125" /*2125*/, "\u2126" /*2126*/, "\u2127" /*2127*/, "\u2128" /*2128*/, "\u2129" /*2129*/, "\u212a" /*212a*/, "\u212b" /*212b*/, "\u212c" /*212c*/, "\u212d" /*212d*/, "\u212e" /*212e*/, "\u212f" /*212f*/, 
                "\u2130" /*2130*/, "\u2131" /*2131*/, "\u2132" /*2132*/, "\u2133" /*2133*/, "\u2134" /*2134*/, "\u2135" /*2135*/, "\u2136" /*2136*/, "\u2137" /*2137*/, "\u2138" /*2138*/, "\u2139" /*2139*/, "\u213a" /*213a*/, "\u213b" /*213b*/, "\u213c" /*213c*/, "\u213d" /*213d*/, "\u213e" /*213e*/, "\u213f" /*213f*/, 
                "\u2140" /*2140*/, "\u2141" /*2141*/, "\u2142" /*2142*/, "\u2143" /*2143*/, "\u2144" /*2144*/, "\u2145" /*2145*/, "\u2146" /*2146*/, "\u2147" /*2147*/, "\u2148" /*2148*/, "\u2149" /*2149*/, "\u214a" /*214a*/, "\u214b" /*214b*/, "\u214c" /*214c*/, "\u214d" /*214d*/, "\u214e" /*214e*/, "\u214f" /*214f*/, 
                "1/7" /*2150*/, "1/9" /*2151*/, "1/10" /*2152*/, "1/3" /*2153*/, "2/3" /*2154*/, "1/5" /*2155*/, "2/5" /*2156*/, "3/5" /*2157*/, "4/5" /*2158*/, "1/6" /*2159*/, "5/6" /*215a*/, "1/8" /*215b*/, "3/8" /*215c*/, "5/8" /*215d*/, "7/8" /*215e*/, "1/" /*215f*/, 
                "I" /*2160*/, "II" /*2161*/, "III" /*2162*/, "IV" /*2163*/, "V" /*2164*/, "VI" /*2165*/, "VII" /*2166*/, "VIII" /*2167*/, "IX" /*2168*/, "X" /*2169*/, "XI" /*216a*/, "XII" /*216b*/, "L" /*216c*/, "C" /*216d*/, "D" /*216e*/, "M" /*216f*/, 
                "i" /*2170*/, "ii" /*2171*/, "iii" /*2172*/, "iv" /*2173*/, "v" /*2174*/, "vi" /*2175*/, "vii" /*2176*/, "viii" /*2177*/, "ix" /*2178*/, "x" /*2179*/, "xi" /*217a*/, "xii" /*217b*/, "l" /*217c*/, "c" /*217d*/, "d" /*217e*/, "m" /*217f*/, 
                "(D" /*2180*/, "D)" /*2181*/, "((|))" /*2182*/, ")" /*2183*/, "\u2184" /*2184*/, "\u2185" /*2185*/, "\u2186" /*2186*/, "D))" /*2187*/, "(((|)))" /*2188*/, "0/3" /*2189*/, "\u218a" /*218a*/, "\u218b" /*218b*/, "\u218c" /*218c*/, "\u218d" /*218d*/, "\u218e" /*218e*/, "\u218f" /*218f*/, 
                "-" /*2190*/, "|" /*2191*/, "-" /*2192*/, "|" /*2193*/, "-" /*2194*/, "|" /*2195*/, "\\" /*2196*/, "/" /*2197*/, "\\" /*2198*/, "/" /*2199*/, "-" /*219a*/, "-" /*219b*/, "~" /*219c*/, "~" /*219d*/, "-" /*219e*/, "|" /*219f*/, 
                "-" /*21a0*/, "|" /*21a1*/, "-" /*21a2*/, "-" /*21a3*/, "-" /*21a4*/, "|" /*21a5*/, "-" /*21a6*/, "|" /*21a7*/, "|" /*21a8*/, "-" /*21a9*/, "-" /*21aa*/, "-" /*21ab*/, "-" /*21ac*/, "-" /*21ad*/, "-" /*21ae*/, "|" /*21af*/, 
                "|" /*21b0*/, "|" /*21b1*/, "|" /*21b2*/, "|" /*21b3*/, "|" /*21b4*/, "|" /*21b5*/, "^" /*21b6*/, "V" /*21b7*/, "\\" /*21b8*/, "=" /*21b9*/, "V" /*21ba*/, "^" /*21bb*/, "-" /*21bc*/, "-" /*21bd*/, "|" /*21be*/, "|" /*21bf*/, 
                "-" /*21c0*/, "-" /*21c1*/, "|" /*21c2*/, "|" /*21c3*/, "=" /*21c4*/, "|" /*21c5*/, "=" /*21c6*/, "=" /*21c7*/, "|" /*21c8*/, "=" /*21c9*/, "|" /*21ca*/, "=" /*21cb*/, "=" /*21cc*/, "=" /*21cd*/, "=" /*21ce*/, "=" /*21cf*/, 
                "=" /*21d0*/, "|" /*21d1*/, "=" /*21d2*/, "|" /*21d3*/, "=" /*21d4*/, "|" /*21d5*/, "\\" /*21d6*/, "/" /*21d7*/, "\\" /*21d8*/, "/" /*21d9*/, "=" /*21da*/, "=" /*21db*/, "~" /*21dc*/, "~" /*21dd*/, "|" /*21de*/, "|" /*21df*/, 
                "-" /*21e0*/, "|" /*21e1*/, "-" /*21e2*/, "|" /*21e3*/, "-" /*21e4*/, "-" /*21e5*/, "-" /*21e6*/, "|" /*21e7*/, "-" /*21e8*/, "|" /*21e9*/, "|" /*21ea*/, "|" /*21eb*/, "|" /*21ec*/, "|" /*21ed*/, "|" /*21ee*/, "|" /*21ef*/, 
                "-" /*21f0*/, "\\" /*21f1*/, "\\" /*21f2*/, "|" /*21f3*/, "\u21f4" /*21f4*/, "\u21f5" /*21f5*/, "\u21f6" /*21f6*/, "\u21f7" /*21f7*/, "\u21f8" /*21f8*/, "\u21f9" /*21f9*/, "\u21fa" /*21fa*/, "\u21fb" /*21fb*/, "\u21fc" /*21fc*/, "\u21fd" /*21fd*/, "\u21fe" /*21fe*/, "\u21ff" /*21ff*/
			});
        }

        /// <summary>
        /// Convert accented characters,fractions and roman numerals, Dutch florin (ƒ), copyright symbol, registered symbol and trademark 
        /// to normal English characters and punctuations
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public static string GetMappedCharacters(string input)
        {
            if (String.IsNullOrEmpty(input)) return input;

            var output = new StringBuilder();
            string[] value;
            foreach (var c in input)
            {
                if (c < 0x80)
                {
                    output.Append(c);
                    continue;
                }
                var h = c >> 8;
                var l = c & 0xff;

                if (UnicodeAsciiCharMapping.TryGetValue(h, out value))
                    output.Append(value[l]);
                else
                    output.Append(c);
            }

            return output.ToString();
        }
    }
}
